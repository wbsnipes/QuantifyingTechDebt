@inproceedings{Curtis2012Estimating,
    author = {Curtis, B. and Sappidi, J. and Szynkarski, A.},
    booktitle = {Managing Technical Debt (MTD), 2012 Third International Workshop on},
    citeulike-article-id = {13241430},
    citeulike-linkout-0 = {http://dx.doi.org/10.1109/mtd.2012.6226000},
    citeulike-linkout-1 = {http://ieeexplore.ieee.org/xpls/abs\_all.jsp?arnumber=6226000},
    doi = {10.1109/mtd.2012.6226000},
    institution = {CAST, Fort Worth, TX, USA},
    isbn = {978-1-4673-1748-1},
    keywords = {td},
    month = jun,
    pages = {49--53},
    posted-at = {2014-06-24 14:47:52},
    priority = {4},
    publisher = {IEEE},
    title = {{Estimating the size, cost, and types of Technical Debt}},
    url = {http://dx.doi.org/10.1109/mtd.2012.6226000},
    year = {2012}
}

@article{Transitive,
    citeulike-article-id = {12889107},
    citeulike-linkout-0 = {http://www.cs.nmsu.edu/\~{}ipivkina/TransClosure/},
    keywords = {td},
    posted-at = {2014-01-02 14:15:33},
    priority = {2},
    title = {{Transitive closure}},
    url = {http://www.cs.nmsu.edu/\~{}ipivkina/TransClosure/}
}

@inproceedings{Sangal2005Using,
    abstract = {{An approach to managing the architecture of large software systems is presented. Dependencies are extracted from the code by a conventional static analysis, and shown in a tabular form known as the 'Dependency Structure Matrix' (DSM). A variety of algorithms are available to help organize the matrix in a form that reflects the architecture and highlights patterns and problematic dependencies. A hierarchical structure obtained in part by such algorithms, and in part by input from the user, then becomes the basis for 'design rules' that capture the architect's intent about which dependencies are acceptable. The design rules are applied repeatedly as the system evolves, to identify violations, and keep the code and its architecture in conformance with one another. The analysis has been implemented in a tool called LDM which has been applied in several commercial projects; in this paper, a case study application to Haystack, an information retrieval system, is described.}},
    address = {New York, NY, USA},
    author = {Sangal, Neeraj and Jordan, Ev and Sinha, Vineet and Jackson, Daniel},
    booktitle = {OOPSLA '05: Proceedings of the 20th annual ACM SIGPLAN conference on Object-oriented programming, systems, languages, and applications},
    citeulike-article-id = {703138},
    citeulike-linkout-0 = {http://portal.acm.org/citation.cfm?id=1094824},
    citeulike-linkout-1 = {http://dx.doi.org/10.1145/1094811.1094824},
    doi = {10.1145/1094811.1094824},
    isbn = {1-59593-031-0},
    keywords = {maintainability, productivity, td},
    location = {San Diego, CA, USA},
    month = oct,
    number = {10},
    pages = {167--176},
    posted-at = {2013-12-31 19:21:21},
    priority = {2},
    publisher = {ACM},
    title = {{Using dependency models to manage complex software architecture}},
    url = {http://dx.doi.org/10.1145/1094811.1094824},
    volume = {40},
    year = {2005}
}

@article{MacCormack2012Exploring,
    abstract = {{A variety of academic studies argue that a relationship exists between the structure of an organization and the design of the products that this organization produces. Specifically, products tend to  ” mirror” the architectures of the organizations in which they are developed. This dynamic occurs because the organization's governance structures, problem solving routines and communication patterns constrain the space in which it searches for new solutions. Such a relationship is important, given that product architecture has been shown to be an important predictor of product performance, product variety, process flexibility and even the path of industry evolution. We explore this relationship in the software industry. Our research takes advantage of a natural experiment, in that we observe products that fulfill the same function being developed by very different organizational forms. At one extreme are commercial software firms, in which the organizational participants are tightly-coupled, with respect to their goals, structure and behavior. At the other, are open source software communities, in which the participants are much more loosely-coupled by comparison. The mirroring hypothesis predicts that these different organizational forms will produce products with distinctly different architectures. Specifically, loosely-coupled organizations will develop more modular designs than tightly-coupled organizations. We test this hypothesis, using a sample of matched-pair products. We find strong evidence to support the mirroring hypothesis. In all of the pairs we examine, the product developed by the loosely-coupled organization is significantly more modular than the product from the tightly-coupled organization. We measure modularity by capturing the level of coupling between a product's components. The magnitude of the differences is substantial—up to a factor of six, in terms of the potential for a design change in one component to propagate to others. Our results have significant managerial implications, in highlighting the impact of organizational design decisions on the technical structure of the artifacts that these organizations subsequently develop. \^{a}º We explore the relationship between product designs and organizational designs. \^{a}º We compare open source software with software developed by commercial firms. \^{a}º We measure modularity by capturing the level of coupling between components. \^{a}º We find that loosely coupled organizations tend to develop more modular products. \^{a}º The differences in modularity are substantial—up to a factor of six in our sample.}},
    author = {MacCormack, Alan and Baldwin, Carliss and Rusnak, John},
    citeulike-article-id = {10772706},
    citeulike-linkout-0 = {http://dx.doi.org/10.1016/j.respol.2012.04.011},
    comment = {(private-note)Defines Propagation Cost as the mean visibility of files in a system where visibility is related to the density of the matrix of function calls that occur between files aggregate over all levels of calls.},
    doi = {10.1016/j.respol.2012.04.011},
    issn = {00487333},
    journal = {Research Policy},
    keywords = {maintainability, productivity, td},
    month = oct,
    number = {8},
    pages = {1309--1324},
    posted-at = {2013-12-31 19:17:59},
    priority = {0},
    title = {{Exploring the duality between product and organizational architectures: A test of the  ” mirroring” hypothesis}},
    url = {http://dx.doi.org/10.1016/j.respol.2012.04.011},
    volume = {41},
    year = {2012}
}

@inproceedings{Brown2011Analysis,
    author = {Brown, N. and Nord, R. L. and Ozkaya, I. and Pais, M.},
    booktitle = {Software Architecture (WICSA), 2011 9th Working IEEE/IFIP Conference on},
    citeulike-article-id = {12884146},
    citeulike-linkout-0 = {http://dx.doi.org/10.1109/wicsa.2011.22},
    citeulike-linkout-1 = {http://ieeexplore.ieee.org/xpls/abs\_all.jsp?arnumber=5959724},
    doi = {10.1109/wicsa.2011.22},
    institution = {Software Eng. Inst., Carnegie Mellon Univ., Pittsburgh, PA, USA},
    isbn = {978-1-61284-399-5},
    keywords = {td},
    month = jun,
    pages = {103--112},
    posted-at = {2013-12-30 18:49:16},
    priority = {4},
    publisher = {IEEE},
    title = {{Analysis and Management of Architectural Dependencies in Iterative Release Planning}},
    url = {http://dx.doi.org/10.1109/wicsa.2011.22},
    year = {2011}
}

@electronic{Exploring,
    citeulike-article-id = {11831262},
    citeulike-linkout-0 = {http://sewiki.iai.uni-bonn.de/research/cultivate/tutorial\_exploring\_smells\_and\_metrics},
    keywords = {metrics, td},
    posted-at = {2012-12-06 22:02:19},
    priority = {0},
    title = {{Exploring Smells and Metrics}},
    url = {http://sewiki.iai.uni-bonn.de/research/cultivate/tutorial\_exploring\_smells\_and\_metrics}
}

@inproceedings{Marinescu2001Detecting,
    abstract = {{The industry is nowadays confronted with large-scale monolithic and inflexible object-oriented software. Because of their high business value, these legacy systems must be re-engineered. One of the important issues in re-engineering is the detection and location of design flaws, which prevent the efficient maintenance and further development of the system. In this paper, we present a metrics-based approach for detecting design problems, and we describe two concrete techniques for the detection of two well-known design flaws found in the literature. We apply our technique to an industrial case study and discuss the findings. The proposed technique indeed found real flaws in the system and the experiment suggests that, based on the same approach, further detection techniques for other common design flaws could be defined}},
    author = {Marinescu, R.},
    booktitle = {Technology of Object-Oriented Languages and Systems, 2001. TOOLS 39. 39th International Conference and Exhibition on},
    citeulike-article-id = {11827336},
    citeulike-linkout-0 = {http://dx.doi.org/10.1109/tools.2001.941671},
    citeulike-linkout-1 = {http://ieeexplore.ieee.org/xpls/abs\_all.jsp?arnumber=941671},
    doi = {10.1109/tools.2001.941671},
    institution = {Dept. of Comput. Sci, Politehnica Univ. of Timisoara},
    isbn = {0-7695-1251-8},
    issn = {1530-2067},
    keywords = {metrics, td},
    pages = {173--182},
    posted-at = {2012-12-06 14:18:22},
    priority = {2},
    publisher = {IEEE},
    title = {{Detecting design flaws via metrics in object-oriented systems}},
    url = {http://dx.doi.org/10.1109/tools.2001.941671},
    year = {2001}
}

@inproceedings{Nord2012In,
    abstract = {{Practices designed to expedite the delivery of stakeholder value can paradoxically lead to unexpected rework costs that ultimately degrade the flow of value over time. This is especially observable when features are developed based on immediate value, while dependencies that may slow down future development efforts are neglected. The technical debt metaphor conceptualizes this tradeoff between short-term and long-term value: taking shortcuts to optimize the delivery of features in the short term incurs debt, analogous to financial debt, that must be paid off later to optimize long-term success. In this paper, we describe taking an architecture-focused and measurement-based approach to develop a metric that assists in strategically managing technical debt. Such an approach can be used to optimize the cost of development over time while continuing to deliver value to the customer. We demonstrate our approach by describing its application to an ongoing system development effort.}},
    author = {Nord, R. L. and Ozkaya, I. and Kruchten, P. and Gonzalez-Rojas, M.},
    booktitle = {Software Architecture (WICSA) and European Conference on Software Architecture (ECSA), 2012 Joint Working IEEE/IFIP Conference on},
    citeulike-article-id = {11826703},
    citeulike-linkout-0 = {http://dx.doi.org/10.1109/wicsa-ecsa.212.17},
    citeulike-linkout-1 = {http://ieeexplore.ieee.org/xpls/abs\_all.jsp?arnumber=6337765},
    comment = {(private-note)This paper defines a formula for estimating the impact of architecture debt upon a potential new feature development.  The formula considers change propagation, number of dependencies, and rework estimates for existing components that must be rearchitected.  They illustrate the use of this equation in a case study showing that making an investment in architecture components that do not support functionality delivered in the first release is more cost effective in the long run.},
    doi = {10.1109/wicsa-ecsa.212.17},
    institution = {Software Eng. Inst., Carnegie Mellon Univ., Pittsburgh, PA, USA},
    isbn = {978-1-4673-2809-8},
    keywords = {metrics, td},
    month = aug,
    pages = {91--100},
    posted-at = {2012-12-05 22:12:26},
    priority = {2},
    publisher = {IEEE},
    title = {{In Search of a Metric for Managing Architectural Technical Debt}},
    url = {http://dx.doi.org/10.1109/wicsa-ecsa.212.17},
    year = {2012}
}

@book{Tate2006Sustainable,
    author = {Tate, Kevin},
    booktitle = {Sustainable software development : an agile perspective},
    chapter = {2},
    citeulike-article-id = {10384311},
    editor = {Cockburn, Alistair and Highsmith, Jim},
    isbn = {0321286081},
    keywords = {td},
    location = {Upper Saddle River, NJ},
    posted-at = {2012-02-25 02:28:45},
    priority = {2},
    publisher = {Addison-Wesley},
    title = {{Sustainable software development : an agile perspective}},
    year = {2006}
}

@inproceedings{Karg2008Analysis,
    abstract = {{The majority of software quality cost models is by design capable of describing costs retrospectively but relies on defect estimation in order to provide a cost forecast. We identify two major approaches to defect estimation and evaluate them in a large scale industrial software development project with special focus on applicability in quality cost models. Our studies show that neither static models based on code metrics nor dynamic software reliability growth models are suitable for an industrial application.}},
    author = {Karg, L. M. and Beckhaus, A.},
    booktitle = {Industrial Engineering and Engineering Management, 2008. IEEM 2008. IEEE International Conference on},
    citeulike-article-id = {10383845},
    citeulike-linkout-0 = {http://dx.doi.org/10.1109/ieem.2008.4737876},
    citeulike-linkout-1 = {http://ieeexplore.ieee.org/xpls/abs\_all.jsp?arnumber=4737876},
    doi = {10.1109/ieem.2008.4737876},
    institution = {SAP Res., Darmstadt, Germany},
    isbn = {978-1-4244-2629-4},
    keywords = {ds, prediction, td},
    month = dec,
    pages = {287--291},
    posted-at = {2012-02-24 21:35:26},
    priority = {2},
    publisher = {IEEE},
    title = {{Analysis of software quality cost modeling's industrial applicability with focus on defect estimation}},
    url = {http://dx.doi.org/10.1109/ieem.2008.4737876},
    year = {2008}
}

@techreport{1998IEEE,
    abstract = {{The minimum required contents of a Software Configuration Management Plan (SCMP) are established, and the specific activities to be addressed and their requirements for any portion of a software product's life cycle are defined.}},
    citeulike-article-id = {10381607},
    citeulike-linkout-0 = {http://dx.doi.org/10.1109/ieeestd.1998.88281},
    citeulike-linkout-1 = {http://ieeexplore.ieee.org/xpls/abs\_all.jsp?arnumber=720569},
    doi = {10.1109/ieeestd.1998.88281},
    isbn = {0-7381-0331-4},
    keywords = {re-change, td},
    pages = {i--17},
    posted-at = {2012-02-24 03:07:17},
    priority = {2},
    publisher = {IEEE},
    title = {{IEEE Standard for Software Configuration Management Plans}},
    url = {http://dx.doi.org/10.1109/ieeestd.1998.88281},
    year = {1998}
}

@techreport{1990IEEE,
    abstract = {{Describes the IEEE Std 610.12-1990, IEEE standard glossary of software engineering terminology, which identifies terms currently in use in the field of software engineering. Standard definitions for those terms are established.>}},
    citeulike-article-id = {1341545},
    citeulike-linkout-0 = {http://dx.doi.org/10.1109/ieeestd.1990.101064},
    citeulike-linkout-1 = {http://ieeexplore.ieee.org/xpls/abs\_all.jsp?arnumber=159342},
    doi = {10.1109/ieeestd.1990.101064},
    journal = {IEEE Std 610.12-1990},
    keywords = {td},
    pages = {1+},
    posted-at = {2012-02-24 02:54:55},
    priority = {2},
    publisher = {IEEE},
    title = {{IEEE Standard Glossary of Software Engineering Terminology}},
    url = {http://dx.doi.org/10.1109/ieeestd.1990.101064},
    year = {1990}
}

@electronic{Advances,
    citeulike-article-id = {10350576},
    citeulike-linkout-0 = {http://books.google.com/books?hl=en\&\#38;lr=lang\_en\&\#38;id=eFGi\_414Y-cC\&\#38;oi=fnd\&\#38;pg=PA25\&\#38;dq=software+technical+debt\&\#38;ots=0YO0oFJav\_\&\#38;sig=OxCsqiiXY7e0cpuUUOSp\_CCnzA4\#v=onepage\&\#38;q=software\%20technical\%20debt\&\#38;f=false},
    keywords = {td},
    posted-at = {2012-02-14 12:08:17},
    priority = {2},
    title = {{Advances in Computers - Marvin Zelkowitz - Google Books}},
    url = {http://books.google.com/books?hl=en\&\#38;lr=lang\_en\&\#38;id=eFGi\_414Y-cC\&\#38;oi=fnd\&\#38;pg=PA25\&\#38;dq=software+technical+debt\&\#38;ots=0YO0oFJav\_\&\#38;sig=OxCsqiiXY7e0cpuUUOSp\_CCnzA4\#v=onepage\&\#38;q=software\%20technical\%20debt\&\#38;f=false}
}

@inproceedings{Guo2011Tracking,
    abstract = {{The technical debt metaphor is increasingly being used to describe the effect of delaying certain software maintenance tasks on software projects. Practitioners understand intuitively how technical debt can turn into a serious problem if it is left unattended. However, it remains unknown how serious the problem is and whether explicit measurement and management of technical debt is useful. In this paper, we explore the effect of technical debt by tracking a single delayed maintenance task in a real software project throughout its lifecycle and simulate how explicit technical debt management might have changed project outcomes. The results from this study demonstrate how and to what extent technical debt affects software projects. The study also sheds light on the research methodologies that can be used to investigate the technical debt management problem.}},
    author = {Guo, Yuepu and Seaman, C. and Gomes, R. and Cavalcanti, A. and Tonin, G. and Da Silva, F. Q. B. and Santos, A. L. M. and Siebra, C.},
    booktitle = {Software Maintenance (ICSM), 2011 27th IEEE International Conference on},
    citeulike-article-id = {10350571},
    citeulike-linkout-0 = {http://dx.doi.org/10.1109/icsm.2011.6080824},
    citeulike-linkout-1 = {http://ieeexplore.ieee.org/xpls/abs\_all.jsp?arnumber=6080824},
    doi = {10.1109/icsm.2011.6080824},
    institution = {Dept. of Inf. Syst., Univ. of Maryland Baltimore County, Baltimore, MD, USA},
    isbn = {978-1-4577-0663-9},
    issn = {1063-6773},
    keywords = {td},
    pages = {528--531},
    posted-at = {2012-02-14 12:03:09},
    priority = {2},
    publisher = {IEEE},
    title = {{Tracking technical debt — An exploratory case study}},
    url = {http://dx.doi.org/10.1109/icsm.2011.6080824},
    year = {2011}
}

@inproceedings{Kaiser2011Selling,
    abstract = {{Extreme programming (XP) techniques and other advances in software development allow for creation of a code base which is more easily understood and maintained. This often leads to faster enhancements, at a lower cost, and with fewer defects. However, when these practices are not followed, problems within the code base can manifest themselves as technical debt. The following report details the experience of one team in trying to influence toward greater understanding in and investment toward their technical debt problem by making that problem visible. The team hangs large representations of their code base in the walkway by their desks. The charts create conversation in and around the team and eventually shows results.}},
    author = {Kaiser, M. and Royse, G.},
    booktitle = {AGILE Conference (AGILE), 2011},
    citeulike-article-id = {10350570},
    citeulike-linkout-0 = {http://dx.doi.org/10.1109/agile.2011.50},
    citeulike-linkout-1 = {http://ieeexplore.ieee.org/xpls/abs\_all.jsp?arnumber=6005521},
    doi = {10.1109/agile.2011.50},
    institution = {Centric Consulting, Columbus, OH, USA},
    isbn = {978-1-61284-426-8},
    keywords = {td},
    month = aug,
    pages = {175--180},
    posted-at = {2012-02-14 12:02:29},
    priority = {2},
    publisher = {IEEE},
    title = {{Selling the Investment to Pay Down Technical Debt: The Code Christmas Tree}},
    url = {http://dx.doi.org/10.1109/agile.2011.50},
    year = {2011}
}

@inproceedings{Ozkaya2011Second,
    abstract = {{The technical debt metaphor is gaining significant traction in the software development community as a way to understand and communicate issues of intrinsic quality, value, and cost. The idea is that developers sometimes accept compromises in a system in one dimension (e.g., modularity) to meet an urgent demand in some other dimension (e.g., a deadline), and that such compromises incur a "debt": on which "interest" has to be paid and which should be repaid at some point for the long-term health of the project. Little is known about technical debt, beyond feelings and opinions. The software engineering research community has an opportunity to study this phenomenon and improve the way it is handled. We can offer software engineers a foundation for managing such trade-offs based on models of their economic impacts. The goal of this second workshop is to discuss managing technical debt as a part of the research agenda for the software engineering field.}},
    address = {New York, NY, USA},
    author = {Ozkaya, Ipek and Kruchten, Philippe and Nord, Robert and Brown, Nanette},
    booktitle = {Proceedings of the 33rd International Conference on Software Engineering},
    citeulike-article-id = {10350566},
    citeulike-linkout-0 = {http://portal.acm.org/citation.cfm?id=1986051},
    citeulike-linkout-1 = {http://dx.doi.org/10.1145/1985793.1986051},
    citeulike-linkout-2 = {http://ieeexplore.ieee.org/xpls/abs\_all.jsp?arnumber=6032641},
    doi = {10.1145/1985793.1986051},
    institution = {Carnegie Mellon University, Pittsburgh, PA, USA},
    isbn = {978-1-4503-0445-0},
    issn = {0270-5257},
    keywords = {td},
    location = {Waikiki, Honolulu, HI, USA},
    month = may,
    pages = {1212--1213},
    posted-at = {2012-02-14 11:56:26},
    priority = {2},
    publisher = {ACM},
    series = {ICSE '11},
    title = {{Second international workshop on managing technical debt (MTD 2011)}},
    url = {http://dx.doi.org/10.1145/1985793.1986051},
    year = {2011}
}

@article{Buschmann2011To,
    abstract = {{Ward Cunningham coined the term technical debt as a metaphor for the trade-off between writing clean code at higher cost and delayed de livery, and writing messy code cheap and fast at the cost of higher maintenance efforts once it's shipped. Joshua Kerievsky extended the metaphor to architecture and design. Technical debt is similar to financial debt: it supports quick development at the cost of compound interest to be paid later. The longer we wait to garden our design and code, the larger the amount of interest. Discussions of the metaphor have distinguished different types of technical debt and how and when to best pay them off. Most agree that, sooner or later, technical debt will come due. But is this assumption universally true? If it's better to pay interest, what factors influence the decision to service the debt? And if we decide to retire it, what approach should we take?}},
    address = {Los Alamitos, CA, USA},
    author = {Buschmann, F.},
    citeulike-article-id = {10316452},
    citeulike-linkout-0 = {http://portal.acm.org/citation.cfm?id=2068549},
    citeulike-linkout-1 = {http://dx.doi.org/10.1109/ms.2011.150},
    citeulike-linkout-2 = {http://ieeexplore.ieee.org/xpls/abs\_all.jsp?arnumber=6055661},
    doi = {10.1109/ms.2011.150},
    issn = {0740-7459},
    journal = {Software, IEEE},
    keywords = {td},
    month = nov,
    number = {6},
    pages = {29--31},
    posted-at = {2012-02-14 11:53:31},
    priority = {4},
    publisher = {IEEE},
    title = {{To Pay or Not to Pay Technical Debt}},
    url = {http://dx.doi.org/10.1109/ms.2011.150},
    volume = {28},
    year = {2011}
}

@inproceedings{Brown2010Managing,
    abstract = {{Delivering increasingly complex software-reliant systems demands better ways to manage the long-term effects of short-term expedients. The technical debt metaphor is gaining significant traction in the agile development community as a way to understand and communicate such issues. The idea is that developers sometimes accept compromises in a system in one dimension (e.g., modularity) to meet an urgent demand in some other dimension (e.g., a deadline), and that such compromises incur a "debt": on which "interest" has to be paid and which the "principal" should be repaid at some point for the long-term health of the project. We argue that the software engineering research community has an opportunity to study and improve this concept. We can offer software engineers a foundation for managing such trade-offs based on models of their economic impacts. Therefore, we propose managing technical debt as a part of the future research agenda for the software engineering field.}},
    address = {New York, NY, USA},
    author = {Brown, Nanette and Cai, Yuanfang and Guo, Yuepu and Kazman, Rick and Kim, Miryung and Kruchten, Philippe and Lim, Erin and MacCormack, Alan and Nord, Robert and Ozkaya, Ipek and Sangwan, Raghvinder and Seaman, Carolyn and Sullivan, Kevin and Zazworka, Nico},
    booktitle = {Proceedings of the FSE/SDP workshop on Future of software engineering research},
    citeulike-article-id = {8531446},
    citeulike-linkout-0 = {http://portal.acm.org/citation.cfm?id=1882373},
    citeulike-linkout-1 = {http://dx.doi.org/10.1145/1882362.1882373},
    doi = {10.1145/1882362.1882373},
    isbn = {978-1-4503-0427-6},
    keywords = {td},
    location = {Santa Fe, New Mexico, USA},
    pages = {47--52},
    posted-at = {2012-02-14 11:40:15},
    priority = {4},
    publisher = {ACM},
    series = {FoSER '10},
    title = {{Managing technical debt in software-reliant systems}},
    url = {http://dx.doi.org/10.1145/1882362.1882373},
    year = {2010}
}

@electronic{Unsustainable,
    citeulike-article-id = {10325242},
    citeulike-linkout-0 = {http://www.informit.com/articles/article.aspx?p=422306},
    keywords = {td},
    posted-at = {2012-02-08 02:50:22},
    priority = {2},
    title = {{Unsustainable Development}},
    url = {http://www.informit.com/articles/article.aspx?p=422306}
}

@article{OzkayaDeveloping,
    author = {Ozkaya, Ipek},
    citeulike-article-id = {10257624},
    citeulike-linkout-0 = {http://blog.sei.cmu.edu/post.cfm/developing-an-architecture-focused-measurement-framework-for-managing-technical-debt},
    comment = {(private-note)We could use change history mining via Code Hot Spot combined with MORPHISIS architectural metrics to arrive at a similar evaluation of architecture dependency and propagation cost.},
    keywords = {td},
    posted-at = {2012-01-23 18:38:50},
    priority = {0},
    title = {{Developing an Architecture-Focused Measurement Framework for Managing Technical Debt » SEI Blog}},
    url = {http://blog.sei.cmu.edu/post.cfm/developing-an-architecture-focused-measurement-framework-for-managing-technical-debt}
}

@article{Green2011Measuring,
    abstract = {{Over the past several years scrum has grown to become the most commonly used product development method at Adobe Systems. Large desktop software products like Premiere Pro and After Effects, Platform tools like Adobe AIR, and Software as a Service products like Acrobat Connect and Omniture SiteCatalyst are using scrum to become more effective at delivering the right solutions to customers with higher quality. This paper discusses the methods Adobe Systems is putting in place to measure the impact scrum has had on these teams.}},
    address = {Los Alamitos, CA, USA},
    author = {Green, Peter},
    citeulike-article-id = {10212077},
    citeulike-linkout-0 = {http://doi.ieeecomputersociety.org/10.1109/HICSS.2011.306},
    citeulike-linkout-1 = {http://dx.doi.org/10.1109/hicss.2011.306},
    comment = {(private-note)We have found that deferred defects tend to be very
strongly correlated to defects found by customers in the field, so this particular metric is a good predictor
of the perceived quality of the software we release.},
    doi = {10.1109/hicss.2011.306},
    isbn = {978-0-7695-4282-9},
    journal = {Hawaii International Conference on System Sciences},
    keywords = {cmds, prediction, reliability, td},
    pages = {1--10},
    posted-at = {2012-01-10 16:46:55},
    priority = {3},
    publisher = {IEEE Computer Society},
    title = {{Measuring the Impact of Scrum on Product Development at Adobe Systems}},
    url = {http://dx.doi.org/10.1109/hicss.2011.306},
    volume = {0},
    year = {2011}
}

@inproceedings{Wagner2007Using,
    abstract = {{The economics and cost of software quality have been discussed in software engineering for decades now. There is clearly a relationship and a need to manage cost and quality in combination. Moreover, economics should be the basis of any quality analysis. However, this implies several issues that have not been addressed to an extent so that managing the economics of software quality is common practice. This paper discusses these issues, possible solutions, and research directions.}},
    author = {Wagner, S.},
    booktitle = {Economics of Software and Computation, 2007. ESC '07. First International Workshop on the},
    citeulike-article-id = {10212050},
    citeulike-linkout-0 = {http://dx.doi.org/10.1109/esc.2007.10},
    citeulike-linkout-1 = {http://ieeexplore.ieee.org/xpls/abs\_all.jsp?arnumber=4273048},
    comment = {(private-note)Wenger discusses the economics of software quality and defines a model that considers economic influences and concsequences on the environment the software operates within and the organization responsible for product development and maintenance.  "The quality of the software is then how it influences the activities and its environment in incurring costs and generating benefits."  Research opportunities highlighted include empirical studies of the economics of software quality.},
    doi = {10.1109/esc.2007.10},
    institution = {Tech. Univ. Munchen, Garching},
    isbn = {0-7695-2955-0},
    keywords = {cmds, td},
    month = may,
    pages = {2},
    posted-at = {2012-01-10 16:34:05},
    priority = {0},
    publisher = {IEEE},
    title = {{Using Economics as Basis for Modelling and Evaluating Software Quality}},
    url = {http://dx.doi.org/10.1109/esc.2007.10},
    year = {2007}
}

@article{Jones1996Strategies,
    abstract = {{One of the most chronic problems in software development is the
fact that application requirements are almost never stable and fixed.
Frequent changes in requirements are not always caused by capricious
clients (although sometimes they are). The root cause of requirements
volatility is that many applications are attempting to automate domains
that are only partly understood. As software design and development
proceeds, the process of automation begins to expose these ill-defined
situations. Therefore, although creeping requirements are troublesome,
they are often a technical necessity. Several threads of research and
some emerging technologies are aimed at either clarifying requirements
earlier in development or minimizing the disruptive effect of changing
requirements later}},
    author = {Jones, C.},
    citeulike-article-id = {10211699},
    citeulike-linkout-0 = {http://dx.doi.org/10.1109/2.507640},
    citeulike-linkout-1 = {http://ieeexplore.ieee.org/xpls/abs\_all.jsp?arnumber=507640},
    comment = {(private-note)A change-control board
is a group of managers, client representatives, and technical
personnel who decide which change to accept and
which to reject. },
    doi = {10.1109/2.507640},
    institution = {Software Productivity Res. Inc., Burlington, MA, USA},
    issn = {0018-9162},
    journal = {Computer},
    keywords = {re-change, td},
    month = jun,
    number = {6},
    pages = {92--94},
    posted-at = {2012-01-10 13:48:52},
    priority = {2},
    publisher = {IEEE},
    title = {{Strategies for managing requirements creep}},
    url = {http://dx.doi.org/10.1109/2.507640},
    volume = {29},
    year = {1996}
}

@article{KajkoMattsson2000Software,
    abstract = {{A well-functioning process for reporting, analysing and resolving software problems is an important vehicle for establishing and retaining control over the development and maintenance of software products. In this paper we present such a process, its state of practice and its role within corrective software maintenance. This process is utilized at ABB Robotics AB and is called the System Progress Report process (SPR). The SPR process is the result of our 20 years of work and experience. This paper concludes with our lessons learned and plans for future improvements. Copyright {\copyright} 2000 John Wiley \& Sons, Ltd.}},
    author = {Kajko-Mattsson, Mira and Forssander, Stefan and Andersson, Gunnar},
    citeulike-article-id = {10210633},
    citeulike-linkout-0 = {http://dx.doi.org/10.1002/1096-908x(200009/10)12:5\%3C255::aid-smr216\%3E3.0.co;2-l},
    doi = {10.1002/1096-908x(200009/10)12:5\%3C255::aid-smr216\%3E3.0.co;2-l},
    journal = {J. Softw. Maint: Res. Pract.},
    keywords = {cmds, td},
    number = {5},
    pages = {255--285},
    posted-at = {2012-01-09 22:34:22},
    priority = {2},
    publisher = {John Wiley \& Sons, Ltd.},
    title = {{Software problem reporting and resolution process at ABB Robotics AB: state of practice}},
    url = {http://dx.doi.org/10.1002/1096-908x(200009/10)12:5\%3C255::aid-smr216\%3E3.0.co;2-l},
    volume = {12},
    year = {2000}
}

@article{Humphrey1991Software,
    abstract = {{In 1987 and 1990, the Software Engineering Institute conducted process assessments of the Software Engineering Division (SED) of Hughes Aircraft in Fullerton, CA. The first assessment found the SED to be a level two organization, based on the SEI's process-maturity scale of one to five, where one is worst and five is best. The first assessment identified the strengths and weaknesses of the SED, and the SEI made recommendations for process improvement. Hughes then established and implemented an action plan in accordance with these recommendations. The second assessment found the SEP to be a strong level three organization. The authors outline the assessment method used, the findings and recommendations from the initial assessment, the actions taken by Hughes, the lessons learned, and the business and product consequences.>}},
    author = {Humphrey, W. S. and Snyder, T. R. and Willis, R. R.},
    citeulike-article-id = {10210629},
    citeulike-linkout-0 = {http://dx.doi.org/10.1109/52.300031},
    citeulike-linkout-1 = {http://ieeexplore.ieee.org/xpls/abs\_all.jsp?arnumber=300031},
    doi = {10.1109/52.300031},
    institution = {Software Eng. Inst., Pittsburgh, PA, USA},
    issn = {0740-7459},
    journal = {Software, IEEE},
    keywords = {cmds, td},
    month = jul,
    number = {4},
    pages = {11--23},
    posted-at = {2012-01-09 22:29:52},
    priority = {2},
    publisher = {IEEE},
    title = {{Software process improvement at Hughes Aircraft}},
    url = {http://dx.doi.org/10.1109/52.300031},
    volume = {8},
    year = {1991}
}

@article{Clavadetscher1998User,
    abstract = {{The evidence is voluminous, consistent, and incontrovertible. It
applies to corporate, government agency, and military software
development. Quite simply, the software we build does not meet our
customers' needs: those of us who build large software programs fail
miserably-90 percent of the time-to deliver what customers want, when
they want it, at the agreed upon price; we fail to adequately manage the
software development process, user-developer communication breaks down,
the requirements control process breaks down, we have runaway
requirements, budgets, schedules, and  ” death march”
projects. The Best Practices Framework of the Software Program Manager's
Network outlines some solutions. First, we must identify what can go
wrong. Precedents give ample hints regarding risks. We need to manage
the development process with more attention, particularly to what might
go wrong. Second, we must manage the most fundamental part of our task:
defining our goal. We fail to use requirements management to surface
(early) errors or problems, to baseline and track changes, and to
improve user-developer communication}},
    author = {Clavadetscher, C.},
    citeulike-article-id = {10210626},
    citeulike-linkout-0 = {http://dx.doi.org/10.1109/52.663781},
    citeulike-linkout-1 = {http://ieeexplore.ieee.org/xpls/abs\_all.jsp?arnumber=663781},
    doi = {10.1109/52.663781},
    institution = {Nat. Defense Univ., USA},
    issn = {0740-7459},
    journal = {Software, IEEE},
    keywords = {td},
    month = mar,
    number = {2},
    pages = {30, 32+},
    posted-at = {2012-01-09 22:23:17},
    priority = {2},
    publisher = {IEEE},
    title = {{User involvement: key to success}},
    url = {http://dx.doi.org/10.1109/52.663781},
    volume = {15},
    year = {1998}
}

@electronic{CohnShould,
    author = {Cohn, Mike},
    citeulike-article-id = {10107511},
    citeulike-linkout-0 = {http://blog.mountaingoatsoftware.com/should-story-points-be-assigned-to-a-bug-fixing-story},
    keywords = {td},
    posted-at = {2011-12-08 18:58:39},
    priority = {0},
    title = {{Should Story Points Be Assigned to A Bug-Fixing Story | Mike Cohn's Blog - Succeeding With Agile®}},
    url = {http://blog.mountaingoatsoftware.com/should-story-points-be-assigned-to-a-bug-fixing-story}
}

@electronic{Whats,
    citeulike-article-id = {10107485},
    citeulike-linkout-0 = {http://www.thetestingplanet.com/2011/04/what\%E2\%80\%99s-a-defect-worth/},
    journal = {The Testing Planet},
    keywords = {td},
    posted-at = {2011-12-08 18:44:13},
    priority = {0},
    title = {{What's a defect worth?}},
    url = {http://www.thetestingplanet.com/2011/04/what\%E2\%80\%99s-a-defect-worth/}
}

@inproceedings{NicoZazworkaComparing,
    abstract = {{Background:     Software     systems     accumulate 
technical   debt   (TD)   when   short-term   goals   in   software 
development  are  traded  for  long  term  goals  (e.g.,  quick-and-
dirty  implementation  to  reach  a  release  date  vs.  a  well-
refactored  implementation  that supports the  long term  health 
of  the  project).  The  code-level  debt  accumulated  by  a  system 
can   be   identified   through   different   source   code   analysis 
techniques;  what  has  not  been  studied  is  how  a  larger  set  of 
techniques   overlap   with   respect   to   flagging   source   code 
components,   and   how   the   use   of   these   techniques   helps 
identifying code components that are in debt. 
Aims:  Comparing  the  results  of  different  TD  identification 
approaches to understand their commonalities and differences 
and to evaluate their relationship to software quality.  
Method:    We    selected    four    different    TD    identification 
techniques (code smells, automatic static analysis (ASA) issues, 
grime buildup, and modularity violations) and applied them to 
13  versions  of  the  Apache  Hadoop  open  source  software 
project.  We  collected  and  aggregated  statistical  measures  to 
investigate  whether  the  different  techniques  identified  TD 
indicators  in  the  same  classes  and  whether  those  classes 
exposed high defect and change proneness. 
Results: The four approaches have very little overlap and are 
therefore   pointing   to   different   problems   in   source   code. 
Dispersed  coupling  and  modularity  violations  were  co-located 
in classes with higher defect proneness, and we also observed a 
strong  relationship  between  modularity  violations  and  change 
proneness. 
Conclusions: Our main contribution is an initial TD landscape 
figure  that  shows  that  different  TD  techniques  and  related 
indicators are loosely coupled and therefore indicate problems 
in  different  locations  of  the  source  code.  Moreover,  only  a 
small subset of TD indicators is strongly and directly related to 
quality indicators.}},
    author = {Nico Zazworka, Antonio V. and Yuangfang Cai, Carolyn S.},
    citeulike-article-id = {10104326},
    citeulike-linkout-0 = {http://www.google.com/search?q=Comparing+Four+Approaches+for+Technical+Debt+Identification\&\#38;sourceid=ie7\&\#38;rls=com.microsoft:en-us:IE-Address\&\#38;ie=\&\#38;oe=\&\#38;rlz=1I7GGHP\_en},
    keywords = {td},
    posted-at = {2011-12-07 21:00:09},
    priority = {3},
    title = {{Comparing Four Approaches for Technical Debt Identification - Google Search}},
    url = {http://www.google.com/search?q=Comparing+Four+Approaches+for+Technical+Debt+Identification\&\#38;sourceid=ie7\&\#38;rls=com.microsoft:en-us:IE-Address\&\#38;ie=\&\#38;oe=\&\#38;rlz=1I7GGHP\_en}
}

@inproceedings{DAmbros2010Impact,
    abstract = {{The presence of design flaws in a software system has a negative impact on the quality of the software, as they indicate violations of design practices and principles, which make a software system harder to understand, maintain, and evolve. Software defects are tangible effects of poor software quality. In this paper we study the relationship between software defects and a number of design flaws. We found that, while some design flaws are more frequent, none of them can be considered more harmful with respect to software defects. We also analyzed the correlation between the introduction of new flaws and the generation of defects.}},
    author = {D'Ambros, M. and Bacchelli, A. and Lanza, M.},
    booktitle = {Quality Software (QSIC), 2010 10th International Conference on},
    citeulike-article-id = {10104321},
    citeulike-linkout-0 = {http://dx.doi.org/10.1109/qsic.2010.58},
    citeulike-linkout-1 = {http://ieeexplore.ieee.org/xpls/abs\_all.jsp?arnumber=5562941},
    doi = {10.1109/qsic.2010.58},
    institution = {Fac. of Inf., REVEAL, Univ. of Lugano, Lugano, Switzerland},
    isbn = {978-1-4244-8078-4},
    issn = {1550-6002},
    keywords = {td},
    month = jul,
    pages = {23--31},
    posted-at = {2011-12-07 20:55:33},
    priority = {4},
    publisher = {IEEE},
    title = {{On the Impact of Design Flaws on Software Defects}},
    url = {http://dx.doi.org/10.1109/qsic.2010.58},
    year = {2010}
}

@article{Hayes2005Maintainability,
    abstract = {{In order to build predictors of the maintainability of evolving software, we first need a means for measuring maintainability as well as a training set of software modules for which the actual maintainability is known. This paper describes our success at building such a predictor. Numerous candidate measures for maintainability were examined, including a new compound measure. Two datasets were evaluated and used to build a maintainability predictor. The resulting model, Maintainability Prediction Model (MainPredMo), was validated against three held-out datasets. We found that the model possesses predictive accuracy of 83\% (accurately predicts the maintainability of 83\% of the modules). A variant of MainPredMo, also with accuracy of 83\%, is offered for interested researchers.}},
    author = {Hayes, J. H. and Zhao, L.},
    booktitle = {Software Maintenance, 2005. ICSM'05. Proceedings of the 21st IEEE International Conference on},
    citeulike-article-id = {2948590},
    citeulike-linkout-0 = {http://dx.doi.org/10.1109/icsm.2005.59},
    citeulike-linkout-1 = {http://ieeexplore.ieee.org/xpls/abs\_all.jsp?arnumber=1510154},
    doi = {10.1109/icsm.2005.59},
    isbn = {0-7695-2368-4},
    issn = {1063-6773},
    journal = {Software Maintenance, 2005. ICSM'05. Proceedings of the 21st IEEE International Conference on},
    keywords = {td},
    pages = {601--604},
    posted-at = {2011-11-17 23:28:10},
    priority = {4},
    publisher = {IEEE},
    title = {{Maintainability prediction: a regression analysis of measures of evolving systems}},
    url = {http://dx.doi.org/10.1109/icsm.2005.59},
    year = {2005}
}

@inproceedings{Hayes2004Metricsbased,
    abstract = {{We derive a model for estimating adaptive software maintenance effort in person hours, the adaptive maintenance effort model (AMEffMo). A number of metrics such as lines of code changed and number of operators changed were found to be strongly correlated to maintenance effort. The regression models performed well in predicting adaptive maintenance effort as well as provide useful information for managers and maintainers.}},
    author = {Hayes, J. H. and Patel, S. C. and Zhao, Liming},
    booktitle = {Eighth European Conference on Software Maintenance and Reengineering, 2004. CSMR 2004. Proceedings.},
    citeulike-article-id = {10037371},
    citeulike-linkout-0 = {http://dx.doi.org/10.1109/csmr.2004.1281427},
    citeulike-linkout-1 = {http://ieeexplore.ieee.org/xpls/abs\_all.jsp?arnumber=1281427},
    doi = {10.1109/csmr.2004.1281427},
    isbn = {0-7695-2107-X},
    issn = {1534-5351},
    keywords = {chs-fse2012, ds, td},
    location = {Tampere, Finland},
    month = mar,
    pages = {254--258},
    posted-at = {2011-11-17 23:25:10},
    priority = {4},
    publisher = {IEEE},
    title = {{A metrics-based software maintenance effort model}},
    url = {http://dx.doi.org/10.1109/csmr.2004.1281427},
    year = {2004}
}

@inproceedings{Khomh2009Exploratory,
    abstract = {{Code smells are poor implementation choices, thought to make object-oriented systems hard to maintain. In this study, we investigate if classes with code smells are more change-prone than classes without smells. Specifically, we test the general hypothesis: classes with code smells are not more change prone than other classes. We detect 29 code smells in 9 releases of Azureus and in 13 releases of Eclipse, and study the relation between classes with these code smells and class change-proneness. We show that, in almost all releases of Azureus and Eclipse, classes with code smells are more change-prone than others, and that specific smells are more correlated than others to change-proneness. These results justify a posteriori previous work on the specification and detection ofcode smells and could help focusing quality assurance and testing activities.}},
    address = {Washington, DC, USA},
    author = {Khomh, Foutse and Di Penta, Massimiliano and Gueheneuc, Yann G.},
    booktitle = {Proceedings of the 2009 16th Working Conference on Reverse Engineering},
    citeulike-article-id = {7160838},
    citeulike-linkout-0 = {http://portal.acm.org/citation.cfm?id=1686210},
    citeulike-linkout-1 = {http://dx.doi.org/10.1109/wcre.2009.28},
    citeulike-linkout-2 = {http://ieeexplore.ieee.org/xpls/abs\_all.jsp?arnumber=5328703},
    doi = {10.1109/wcre.2009.28},
    institution = {Dept. de Genie Inf. et Logiciel, Ecole Polytech. de Montreal, Montreal, QC, Canada},
    isbn = {978-0-7695-3867-9},
    issn = {1095-1350},
    keywords = {td},
    location = {Lille, France},
    month = oct,
    pages = {75--84},
    posted-at = {2010-09-08 22:15:51},
    priority = {4},
    publisher = {IEEE Computer Society},
    series = {WCRE '09},
    title = {{An Exploratory Study of the Impact of Code Smells on Software Change-proneness}},
    url = {http://dx.doi.org/10.1109/wcre.2009.28},
    year = {2009}
}

